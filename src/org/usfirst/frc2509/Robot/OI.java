// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2509.Robot;


import com.ctre.CANTalon;

import org.usfirst.frc2509.Robot.commands.ClimbUp;
import org.usfirst.frc2509.Robot.commands.OpDrive;
import org.usfirst.frc2509.Robot.commands.ShooterRun;
import org.usfirst.frc2509.Robot.commands.SweeperForward;
import org.usfirst.frc2509.Robot.commands.SweeperReverse;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
  
	
    public Joystick opStick;
    public JoystickButton ReverseSweep;
    public JoystickButton Shoot;
    private final CANTalon ENCODER = RobotMap.SHOOT_MOTOR;
    public JoystickButton Climb;

	public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        opStick = new Joystick(0);
    
        // SmartDashboard Buttons
        SmartDashboard.putData("OpDrive", new OpDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        ReverseSweep = new JoystickButton(opStick, 3);
        ReverseSweep.whileHeld(new SweeperReverse());
        SmartDashboard.putData("ReverseSweep", new SweeperReverse());
        SmartDashboard.putData("Forward Sweep", new SweeperForward());
        Shoot = new JoystickButton(opStick, 1);
        Shoot.whileHeld(new ShooterRun());
        SmartDashboard.putData("Shooter Start", new ShooterRun());
        Climb = new JoystickButton(opStick, 2);
        Climb.whileHeld(new ClimbUp());
        
  
	}
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getOpStick() {
        return opStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public double getScaledX(){
		return (opStick.getX()*((opStick.getRawAxis(3)+1.5)*0.4));
	}
	public double getScaledY(){
		return (opStick.getY()*((opStick.getRawAxis(3)+1.5)*0.4));
	}
	public double getScaledZ(){
		return (opStick.getZ()*((opStick.getRawAxis(3)+1)*0.5));
	}
}

